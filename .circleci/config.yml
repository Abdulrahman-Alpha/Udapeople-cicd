version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:
    notify_on_failure:
      steps:
        - slack/notify:
            event: fail
            channel: a-project 
            template: basic_fail_1
    
    install_awscli:
       description: Install AWS CLI 
       steps: 
        - run:
            name: install AWS CLI
            command: |
              sudo apt update
              sudo apt install awscli -y

    install_ansible:
        description: Install ansible 
        steps:
          - run:
              name:  install ansible 
              command: |
               sudo apt update
               sudo apt install software-properties-common -y
               sudo add-apt-repository --yes --update ppa:ansible/ansible
               sudo apt install ansible -y
    
    install_nodejs:
        description: Install nodejs 
        steps: 
          - run: 
              name:  Install Node.JS 
              command: | 
                 sudo apt update
                 sudo apt install nodejs
                 sudo apt install npm


    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
       WorkFlow-ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - install_awscli
        - run:
           name: Destroy environments
           when: on_fail
           command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WorkFlow-ID>>
            aws s3 rm s3://udapeople-<<parameters.WorkFlow-ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WorkFlow-ID>>

    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
       WorkFlow-ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}     
      steps:
       - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure http://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.WorkFlow-ID>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:  [frontend-depes]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-depes
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depes]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-depes
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depes]
      - run:
          name: Front-end Unit test
          command: |
            cd frontend 
            npm install
            npm test 
      - notify_on_failure
  
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depes]
      - run:
          name: Back-end Unit test
          command: |
            cd backend
            npm install
            npm test 
      - notify_on_failure

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depes]
      - run:
          name: Front-end Scan 
          command: |
            cd frontend 
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical 
      - notify_on_failure
  
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depes]
      - run:
          name: Back-end Scan 
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["eb:1d:54:01:87:85:02:2a:67:93:c2:05:21:c5:52:b4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
             cd .circleci/ansible
             cat inventory.txt 
             ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout
      - install_awscli 
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run migrations > migrations_dump.txt 
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully. " ~/project/backend/migrations_dump.txt 
            then 
              curl https://kvdb.io/${KVDB_BUCKET}/migrations_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-depes]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=&(aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            
            echo "API_URL =https://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env 
            cat frontend/.env 
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs 
      - add_ssh_keys:
          fingerprints: ["eb:1d:54:01:87:85:02:2a:67:93:c2:05:21:c5:52:b4"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-depes]
      - run:
          name: Install dependencies
          command: |
            cd backend 
            npm install
      - run:
          name: Package Backend 
          command: |
            cd backend
            npm run build
            tar -czvf artifact.tar.gz dist/* package*
            
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domian/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - destroy-environment
      - revert-migrations
            

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then 
              exit 0
            else 
              exit 1 
            fi

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=&(tail -1 .circleci/ansible/inventory.txt)

            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo API_URL = $API_URL
            if curl -s "${API_URL}/api/status" | grep "ok"
            then 
              exit 0 
            else 
              exit 1 
            fi

      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
  notify_on_success:
    docker:
     - image: cimg/base:stable              
    steps:
     - slack/notify:
         event: pass
         channel: a-project
         template: success_tagged_deployment_1
      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires: 
            - test-backend
            - test-frontend
            - scan-frontend
            - scan-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]